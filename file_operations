import os
import pprint
import shutil
import subprocess
import tempfile


def read_word_list(filename, min_length=2, min_different_letters=2):
    """ This function reads the file and returns the words read. It expects a
    file where each word is in a line.
    """
# These are the input requirements for this type of code.
# Using a text file where there is 1 word on each line, this program will generate a crossword puzzzle. 
    # Initialize words list
    words = []

    # Get all the words
    with open(filename, encoding='latin1') as words_file:
        for line in words_file:
            word = line.strip()
            if len(word) > min_length and len(set(word)) > min_different_letters:
                words.append(word)

    # and we're done
    return words

# This is about 20% of the length of the original file that I am using as reference
# Plan to transribe the rest of the fundamentals of this file soon

def write_grid_to_file(grid, out_file="table.tex", out_pdf="out.pdf", keep_tex=False, words=[]):
    """ This function receives the generated grid and writes it to the file (or
    to the screen, if that's what we want). The grid is expected to be a list
    of lists, as used by the remaining functions.

    If a list of words is given, it is taken as the words used on the grid and
    is printed as such.
    """
    # Print grid to the file and compile
    with open(out_file, "w") as texfile:
        # Write preamble
        texfile.write("\documentclass[a4paper]{article}" + "\n")
        texfile.write(r"\usepackage[utf8]{inputenc}" + "\n")
        texfile.write(r"\usepackage[table]{xcolor}" + "\n")
        texfile.write(r"\usepackage{multicol}" + "\n")
        texfile.write(r"\usepackage{fullpage}" + "\n")
        texfile.write(r"\usepackage{graphicx}" + "\n")
        texfile.write("\n")
        texfile.write(r"\begin{document}" + "\n")
        texfile.write(r"\section*{Challenge}" + "\n")

        # Resize box
        texfile.write(r"\resizebox{\textwidth}{!}{")

        # Write table environment and format
        texfile.write(r"\begin{tabular}{|")
        for i in range(len(grid[0])):
            texfile.write(r"c|")
        texfile.write("}\n\hline\n")

        # Write actual table
        for line in grid:
            for index, element in enumerate(line):
                if element == 0:
                    texfile.write(r"\cellcolor{black}0")

                # This feels a bit hacky, suggestions appreciated
                if index != len(line)-1:
                    texfile.write(" & ")

            texfile.write(r"\\ \hline" + "\n")

        # End tabular environment
        texfile.write("\end{tabular}\n")
        texfile.write(r"}" + "\n\n")
